scalar DateTime

type Query {
	currentUser: User!
	channels: [Channel!]!
	channel(id: ID!): Channel!
	defaultChannel: Channel!
	defaultMessages: MessagesConnection!
}

type Mutation {
	register(input: UserInput!): User!
	sendMessage(channelId: ID!, input: MessageInput!): Message!
}

type Subscription {
	channelMessagesStream(channelId: ID!): Message!
	counter: Counter!
}

type Counter {
	count: Int!
	countStr: String
}

type User {
	id: ID!
	email: String!
	fullName: String
	picture: String
}

input UserInput {
	email: String!
}

type Message {
	id: ID!
	content: String!
	author: User!
	createdAt: DateTime!
}

input MessageInput {
	content: String!
}

type Channel {
	id: ID!
	title: String!
	messages: [Message!]!
	author: User!
	createdAt: DateTime
}

type MessageEdge {
	node: Message!
	cursor: String
}

type MessagesConnection {
	edges: [MessageEdge!]!
}
